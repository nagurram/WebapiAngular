# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
 branches:
    include:
    - master
 paths:
   include:
     - WebapiAngular/LSDataApi/*

pool:
   vmImage: 'windows-latest'
 
variables:
  solution: '**/LSDataApi.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- script: 
    choco install iis.administration
    #choco install webdeploy -y
    #choco install urlrewrite -y
  displayName: 'CHOCO Enable iis'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Remove-WebSite -Name "Default Web Site"
      # Write your PowerShell commands here.
      md "c:\Web Sites\webapp"
      $site = $site = new-WebSite -name "webapp" -PhysicalPath "c:\Web Sites\webapp" -force
      dotnet tool install -g dotnet-reportgenerator-globaltool
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
      dotnet new tool-manifest
      dotnet tool install dotnet-reportgenerator-globaltool
  displayName: 'Powershell Create WebApp'
  
- script: choco install sql-server-express
  displayName: 'CHOCO INSTALL SQL-SERVER-EXPRESS'

- script: 'sqlcmd -S .\SQLEXPRESS -Q "CREATE DATABASE [TicketTracker]"'
  displayName: 'Create database TicketTracker in Azure Devops SQL EXPRESS'
  
- script: 'sqlcmd -i $(Build.SourcesDirectory)\WebapiAngular\DBScripts\DBmigrate.sql -S .\SQLEXPRESS -d TicketTracker'
  displayName: ' Run migrate.sql on SQL EXPRESS in Azure Devops'

- task: NuGetToolInstaller@1
- task: VisualStudioTestPlatformInstaller@1
  displayName: 'Visual Studio Test Platform Installer'
  inputs:
    versionSelector: latestStable

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="webapp"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\LSDataApi.Tests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(Build.SourcesDirectory)'
    resultsFolder: '$(Build.SourcesDirectory)\TestResults'
    configuration: '$(buildConfiguration)'
    
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'XUnit'
    testResultsFiles: '**/*.trx'
    searchFolder: '$(Build.SourcesDirectory)\TestResults'
    testRunTitle: 'Test-Results'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/LSDataApi.Tests.csproj'
    arguments: '/p:CollectCoverage=true  /p:CoverletOutputFormat=cobertura%2copencover  /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'
    testRunTitle: 'Test and collect coverage'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    projects: '**/LSDataApi.Tests.csproj'
    custom: 'reportgenerator'
    arguments: '"-reports:$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)\TestResults\Coverage\Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\TestResults\Coverage\**\coverage.cobertura.xml'
    Reportdirectory: $(Build.SourcesDirectory)\TestResults\Coverage\Reports

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud-azurepipeline'
    organization: 'narendraorganization'
    scannerMode: 'MSBuild'
    projectKey: 'narendraprojectkey'
    projectName: 'sonar.LSDataApi_.NetCore'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

#- task: GitHubRelease@1
#  inputs:
#    gitHubConnection: 'nagurram'
#    repositoryName: '$(Build.Repository.Name)'
#    action: 'create'
#    target: '$(Build.SourceVersion)'
#    tagSource: 'gitTag'
#    releaseNotesSource: 'inline'
#    releaseNotesInline: 'Testing'
#    isDraft: true
#    changeLogCompareToRelease: 'lastFullRelease'
#    changeLogType: 'commitBased'